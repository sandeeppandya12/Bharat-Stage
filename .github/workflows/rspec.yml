# name: RSpec Test Coverage

# on:
#   pull_request:

# jobs:
#   build:
#     name: RSpec
#     runs-on: ubuntu-latest
#     env:
#       api-dir: ./back-end

#     services:
#       postgres:
#         image: postgres
#         ports: ["5432:5432"]
#         env:
#           POSTGRES_DB: Bharat_stage_Test
#           POSTGRES_USER: postgres
#           POSTGRES_PASSWORD: password
#           POSTGRES_HOST_AUTH_METHOD: trust
#         options: >-
#           --health-cmd pg_isready
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5

#       redis:
#         image: redis:alpine
#         ports: ["6379:6379"]

#     steps:
#       - uses: actions/checkout@v2

#       - uses: ruby/setup-ruby@v1
#         with:
#           ruby-version: 2.7.5
#           bundler-cache: true

#       - name: Install PostgreSQL dependencies
#         run: sudo apt-get -yqq install libpq-dev

#       - name: Install Gems
#         working-directory: ${{env.api-dir}}
#         run: |
#           gem install bundler
#           bundle install --jobs 4 --retry 3

#       - name: Setup Database
#         working-directory: ${{env.api-dir}}
#         env:
#           RAILS_ENV: test
#           PGHOST: localhost
#           PGUSER: postgres
#           PGPASSWORD: password
#         run: |
#           bin/rails db:create
#           bin/rails db:schema:load

#       - name: Run RSpec Tests
#         working-directory: ${{env.api-dir}}
#         env:
#           RAILS_ENV: test
#           PGHOST: localhost
#           PGUSER: postgres
#           PGPASSWORD: password
#           RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
#           #f835a9d55a4fd633811e57bb9c2c12a9
#           COVERAGE: "true"
#         run: bundle exec rspec --exclude-pattern "spec/requests/v1/**/*_spec.rb"

#       - name: Upload coverage report
#         uses: actions/upload-artifact@v2
#         with:
#           name: coverage
#           path: coverage

#       - name: Calculate coverage percentage
#         run: |
#           sudo apt-get install jq
#           COVERAGE_PERCENTAGE=$(jq -r '.result.covered_percent' "./back-end/coverage/.last_run.json")
#           echo "Coverage percentage: $COVERAGE_PERCENTAGE%"
#           echo "$COVERAGE_PERCENTAGE" > coverage_percentage.txt
#           echo "::set-output name=coverage::$COVERAGE_PERCENTAGE"

#       - name: Comment on PR with coverage results
#         uses: actions/github-script@v6
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           script: |
#             const fs = require('fs');
#             const coveragePercentage = fs.readFileSync('coverage_percentage.txt', 'utf8');
#             const comment = `🧪 Code coverage: **${coveragePercentage}%** (Minimum expected: 80%)`;
#             github.rest.issues.createComment({
#               issue_number: context.issue.number,
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body: comment
#             });

#       - name: Enforce 80% coverage threshold
#         run: |
#           COVERAGE_PERCENTAGE=$(cat coverage_percentage.txt)
#           if (( $(echo "$COVERAGE_PERCENTAGE < 80" | bc -l) )); then
#             echo "❌ Coverage is below 80%. Current: $COVERAGE_PERCENTAGE%"
#             exit 1
#           fi
